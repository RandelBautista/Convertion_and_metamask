{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport { ZERO_ADDRESS, web3BNToFloatString } from \"../actions\";\nimport { getERC20Contract } from \"../actions/contractStore\";\nimport BigNumber from 'bignumber.js';\nimport BN from 'bn.js';\nimport { useWeb3React } from '@web3-react/core';\nexport default function useBalance(tokenAddress, decimals) {\n  var _useState = useState('0'),\n      _useState2 = _slicedToArray(_useState, 2),\n      balance = _useState2[0],\n      setBalance = _useState2[1];\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      library = _useWeb3React.library;\n\n  useEffect(function () {\n    var isCancelled = false;\n\n    function getBalance() {\n      return new Promise(function (resolve) {\n        if (!library || !tokenAddress) {\n          resolve(new BN('0'));\n          return;\n        }\n\n        try {\n          if (tokenAddress === ZERO_ADDRESS) {\n            library.eth.getBalance(account).then(function (value) {\n              resolve(new BN(value));\n            }).catch(function (error) {\n              console.log(error);\n              resolve(new BN('0'));\n            });\n          } else {\n            var contract = getERC20Contract(tokenAddress, library);\n            contract == null ? void 0 : contract.methods.balanceOf(account).call().then(function (value) {\n              resolve(new BN(value));\n            }).catch(function (error) {\n              console.log(error);\n              resolve(new BN('0'));\n            });\n          }\n        } catch (error) {\n          resolve(new BN('0'));\n        }\n      });\n    }\n\n    function run() {\n      var bn, pow;\n      return _regeneratorRuntime.async(function run$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getBalance());\n\n            case 2:\n              bn = _context.sent;\n\n              if (!isCancelled) {\n                pow = new BigNumber('10').pow(new BigNumber(decimals));\n                setBalance(web3BNToFloatString(bn, pow, 4, BigNumber.ROUND_DOWN));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    run();\n    return function () {\n      isCancelled = true;\n    };\n  }, [tokenAddress, library, decimals, account]);\n  return [balance];\n}","map":{"version":3,"sources":["/Users/dearwolves/Documents/Github/sample/converterMetamask/src/actions/useBalance.tsx"],"names":["useState","useEffect","ZERO_ADDRESS","web3BNToFloatString","getERC20Contract","BigNumber","BN","useWeb3React","useBalance","tokenAddress","decimals","balance","setBalance","account","library","isCancelled","getBalance","Promise","resolve","eth","then","value","catch","error","console","log","contract","methods","balanceOf","call","run","bn","pow","ROUND_DOWN"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,EAAuBC,mBAAvB;AACA,SAASC,gBAAT;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,EAAP,MAAe,OAAf;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,eAAe,SAASC,UAAT,CACbC,YADa,EAEbC,QAFa,EAGb;AACA,kBAA8BV,QAAQ,CAAC,GAAD,CAAtC;AAAA;AAAA,MAAOW,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,sBAA6BL,YAAY,EAAzC;AAAA,MAAQM,OAAR,iBAAQA,OAAR;AAAA,MAAiBC,OAAjB,iBAAiBA,OAAjB;;AAEAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,WAAW,GAAG,KAAlB;;AAEA,aAASC,UAAT,GAAsB;AACpB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,YAAI,CAACJ,OAAD,IAAY,CAACL,YAAjB,EAA+B;AAC7BS,UAAAA,OAAO,CAAC,IAAIZ,EAAJ,CAAO,GAAP,CAAD,CAAP;AACA;AACD;;AAED,YAAI;AACF,cAAIG,YAAY,KAAKP,YAArB,EAAmC;AACjCY,YAAAA,OAAO,CAACK,GAAR,CACGH,UADH,CACcH,OADd,EAEGO,IAFH,CAEQ,UAACC,KAAD,EAAW;AACfH,cAAAA,OAAO,CAAC,IAAIZ,EAAJ,CAAOe,KAAP,CAAD,CAAP;AACD,aAJH,EAKGC,KALH,CAKS,UAACC,KAAD,EAAW;AAChBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,cAAAA,OAAO,CAAC,IAAIZ,EAAJ,CAAO,GAAP,CAAD,CAAP;AACD,aARH;AASD,WAVD,MAUO;AACL,gBAAMoB,QAAQ,GAAGtB,gBAAgB,CAACK,YAAD,EAAeK,OAAf,CAAjC;AACAY,YAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAEC,OAAV,CACGC,SADH,CACaf,OADb,EAEGgB,IAFH,GAGGT,IAHH,CAGQ,UAACC,KAAD,EAAW;AACfH,cAAAA,OAAO,CAAC,IAAIZ,EAAJ,CAAOe,KAAP,CAAD,CAAP;AACD,aALH,EAMGC,KANH,CAMS,UAACC,KAAD,EAAW;AAChBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,cAAAA,OAAO,CAAC,IAAIZ,EAAJ,CAAO,GAAP,CAAD,CAAP;AACD,aATH;AAUD;AACF,SAxBD,CAwBE,OAAOiB,KAAP,EAAc;AACdL,UAAAA,OAAO,CAAC,IAAIZ,EAAJ,CAAO,GAAP,CAAD,CAAP;AACD;AACF,OAjCM,CAAP;AAkCD;;AAED,aAAewB,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACmBd,UAAU,EAD7B;;AAAA;AACQe,cAAAA,EADR;;AAEE,kBAAI,CAAChB,WAAL,EAAkB;AACViB,gBAAAA,GADU,GACJ,IAAI3B,SAAJ,CAAc,IAAd,EAAoB2B,GAApB,CAAwB,IAAI3B,SAAJ,CAAcK,QAAd,CAAxB,CADI;AAEhBE,gBAAAA,UAAU,CAACT,mBAAmB,CAAC4B,EAAD,EAAKC,GAAL,EAAU,CAAV,EAAa3B,SAAS,CAAC4B,UAAvB,CAApB,CAAV;AACD;;AALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQAH,IAAAA,GAAG;AAEH,WAAO,YAAM;AACXf,MAAAA,WAAW,GAAG,IAAd;AACD,KAFD;AAGD,GArDQ,EAqDN,CAACN,YAAD,EAAeK,OAAf,EAAwBJ,QAAxB,EAAkCG,OAAlC,CArDM,CAAT;AAuDA,SAAO,CAACF,OAAD,CAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { ZERO_ADDRESS, web3BNToFloatString } from '../actions'\r\nimport { getERC20Contract } from '../actions/contractStore'\r\nimport BigNumber from 'bignumber.js'\r\nimport BN from 'bn.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport default function useBalance(\r\n  tokenAddress,\r\n  decimals,\r\n) {\r\n  const [balance, setBalance] = useState('0')\r\n\r\n  const { account, library } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n\r\n    function getBalance() {\r\n      return new Promise((resolve) => {\r\n        if (!library || !tokenAddress) {\r\n          resolve(new BN('0'))\r\n          return\r\n        }\r\n\r\n        try {\r\n          if (tokenAddress === ZERO_ADDRESS) {\r\n            library.eth\r\n              .getBalance(account)\r\n              .then((value) => {\r\n                resolve(new BN(value))\r\n              })\r\n              .catch((error) => {\r\n                console.log(error)\r\n                resolve(new BN('0'))\r\n              })\r\n          } else {\r\n            const contract = getERC20Contract(tokenAddress, library)\r\n            contract?.methods\r\n              .balanceOf(account)\r\n              .call()\r\n              .then((value) => {\r\n                resolve(new BN(value))\r\n              })\r\n              .catch((error) => {\r\n                console.log(error)\r\n                resolve(new BN('0'))\r\n              })\r\n          }\r\n        } catch (error) {\r\n          resolve(new BN('0'))\r\n        }\r\n      })\r\n    }\r\n\r\n    async function run() {\r\n      const bn = await getBalance()\r\n      if (!isCancelled) {\r\n        const pow = new BigNumber('10').pow(new BigNumber(decimals))\r\n        setBalance(web3BNToFloatString(bn, pow, 4, BigNumber.ROUND_DOWN))\r\n      }\r\n    }\r\n\r\n    run()\r\n\r\n    return () => {\r\n      isCancelled = true\r\n    }\r\n  }, [tokenAddress, library, decimals, account])\r\n\r\n  return [balance]\r\n}"]},"metadata":{},"sourceType":"module"}